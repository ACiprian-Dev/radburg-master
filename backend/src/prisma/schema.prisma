generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model brand {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  model   model[]
  product product[]
  slug    String    @unique
}

model dimension {
  id            Int             @id @default(autoincrement())
  width_mm      Decimal         @db.Decimal(4, 1)
  height_pct    Int?
  rim_diam_in   Decimal         @db.Decimal(4, 1)
  product_tyres product_tyres[]
  slug          String          @unique

  @@unique([width_mm, height_pct, rim_diam_in])
}

model model {
  id       Int       @id @default(autoincrement())
  brand_id Int?
  name     String
  brand    brand?    @relation(fields: [brand_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product  product[]
  slug     String    @unique

  @@unique([brand_id, slug])
}

model offer_meta {
  offer_id                BigInt    @id
  warehouse               String?
  promo_price_numeric     Decimal?  @db.Decimal(10, 2)
  promo_price_valid_until DateTime? @db.Timestamptz(6)
  b2b_only                Boolean?  @default(false)
  partner_prices_json     Json? // JSON array of partner_tier_id and price_numeric pairs
  offer                   offer     @relation(fields: [offer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([warehouse], map: "offer_meta_warehouse_idx")
}

model offer {
  id                                                          BigInt             @id @default(autoincrement())
  product_id                                                  BigInt?
  seller_id                                                   Int?
  sku_external                                                String
  price_numeric                                               Decimal            @db.Decimal(10, 2)
  currency                                                    String?            @default("RON") @db.Char(3)
  stock                                                       Int
  lead_time_days                                              Int?
  is_active                                                   Boolean?           @default(true)
  updated_at                                                  DateTime?          @default(now()) @db.Timestamptz(6)
  product                                                     product?           @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  seller                                                      seller?            @relation(fields: [seller_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  offer_tyres                                                 offer_tyres?
  sales_order_item_sales_order_item_seller_id_offer_idTooffer sales_order_item[] @relation("sales_order_item_seller_id_offer_idTooffer")
  sales_order_item_sales_order_item_offer_idTooffer           sales_order_item[] @relation("sales_order_item_offer_idTooffer")
  partner_price                                               partner_price[]
  offer_meta                                                  offer_meta?

  @@unique([seller_id, id], map: "offer_seller_id_id_uidx")
  @@unique([seller_id, sku_external, product_id])
  @@index([price_numeric], map: "offer_price_idx")
  @@index([product_id], map: "offer_product_idx")
}

model offer_tyres {
  offer_id      BigInt   @id
  min_depth_mm  Decimal? @db.Decimal(3, 1)
  quality_grade String?
  offer         offer    @relation(fields: [offer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([offer_id, min_depth_mm, quality_grade], map: "uq_offer_tyres_natural")
}

model product {
  id                                                          BigInt               @id @default(autoincrement())
  product_type                                                product_type_enum
  brand_id                                                    Int?
  model_id                                                    Int?
  slug                                                        String               @unique
  created_at                                                  DateTime?            @default(now()) @db.Timestamptz(6)
  offer                                                       offer[]
  brand                                                       brand?               @relation(fields: [brand_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  model                                                       model?               @relation(fields: [model_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product_fullwheels_product_fullwheels_product_idToproduct   product_fullwheels?  @relation("product_fullwheels_product_idToproduct")
  product_fullwheels_product_fullwheels_rim_productToproduct  product_fullwheels[] @relation("product_fullwheels_rim_productToproduct")
  product_fullwheels_product_fullwheels_tyre_productToproduct product_fullwheels[] @relation("product_fullwheels_tyre_productToproduct")
  product_rims                                                product_rims?
  product_tyres                                               product_tyres?
  slug_history                                                slug_history[]
  title                                                       String
  main_image_url                                              String?
  is_visible                                                  Boolean              @default(true)
  ean                                                         String?              @unique
  group_sku                                                   String?
  order_rank                                                  Int?                 @default(0)

  // relations
  tags         product_tag[]
  product_copy product_copy?
}

model product_fullwheels {
  product_id                                       BigInt   @id
  tyre_product                                     BigInt?
  rim_product                                      BigInt?
  product_product_fullwheels_product_idToproduct   product  @relation("product_fullwheels_product_idToproduct", fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product_product_fullwheels_rim_productToproduct  product? @relation("product_fullwheels_rim_productToproduct", fields: [rim_product], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product_product_fullwheels_tyre_productToproduct product? @relation("product_fullwheels_tyre_productToproduct", fields: [tyre_product], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model product_raw {
  id         BigInt    @id @default(autoincrement())
  payload    Json
  source     String
  fetched_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([source], map: "product_raw_src_idx")
}

model product_rims {
  product_id     BigInt   @id
  diameter_in    Decimal? @db.Decimal(4, 1)
  width_in       Decimal? @db.Decimal(3, 1)
  pcd            String?
  et_offset_mm   Int?
  center_bore_mm Decimal? @db.Decimal(4, 1)
  product        product  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model product_tyres {
  product_id   BigInt     @id
  dimension_id Int?
  season_id    Int?
  dot_year     Int?
  load_index   Int?
  speed_index  String?
  depth_bucket Int?
  dimension    dimension? @relation(fields: [dimension_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product      product    @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  season       season?    @relation(fields: [season_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  tyre_type                  String? // e.g. "SH", "ECO", "NEW", "REMOULD"
  usage_destination          String? // e.g. "PASSENGER", "SUV", "VAN", "TRUCK", "AGRICULTURE", "INDUSTRIAL"
  km_garantee                Int? // e.g. 50000
  tread_percentage_remaining Int? // e.g. 80
  budget_bucket              String? // e.g. "BUDGET", "MID", "PREMIUM"
  tread_depth_mm             Decimal? @db.Decimal(3, 1) // e.g. 8.0
  axel_position              String? // e.g. "FRONT", "REAR", "ALL"

  // EU-label
  eu_efficiency_class EuLabelClass? @map("eff_class") // A–E
  eu_wet_grip_class   EuLabelClass? @map("grip_class") // A–E
  eu_noise_db         Int?
  eu_noise_class      Int? // 1–3

  quality_grade QualityGrade? // I, II …
  quality_rgba  String? // e.g. "255,0,0" for red

  @@unique([dimension_id, dot_year, depth_bucket, season_id, product_id], map: "uq_product_tyre_natural")
}

model product_copy {
  product_id       BigInt    @id
  hero_json        Json? // JSON object with hero image and other metadata
  pricing_json     Json? // JSON object with pricing details
  photo_json       Json? // JSON object with photo URLs
  description_json Json? // JSON object with description details
  overlay_s        Json? // JSON object with overlay details
  overlay_l        Json? // JSON object with overlay details
  legacy_slug      String?
  updated_at       DateTime? @default(now()) @db.Timestamptz(6)

  product product @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model sales_order {
  id               BigInt             @id @default(autoincrement())
  user_id          BigInt?
  status           String?            @default("NEW")
  total_gross      Decimal?           @db.Decimal(12, 2)
  created_at       DateTime?          @default(now()) @db.Timestamptz(6)
  sales_order_item sales_order_item[]
}

model sales_order_item {
  id                                               BigInt       @id @default(autoincrement())
  order_id                                         BigInt?
  offer_id                                         BigInt?
  seller_id                                        Int
  qty                                              Int
  unit_price                                       Decimal?     @db.Decimal(10, 2)
  commission_snapshot                              Decimal?     @db.Decimal(10, 2)
  offer_sales_order_item_seller_id_offer_idTooffer offer?       @relation("sales_order_item_seller_id_offer_idTooffer", fields: [seller_id, offer_id], references: [seller_id, id], onDelete: NoAction, onUpdate: NoAction, map: "fk_item_seller_match")
  offer_sales_order_item_offer_idTooffer           offer?       @relation("sales_order_item_offer_idTooffer", fields: [offer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sales_order                                      sales_order? @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model season {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  product_tyres product_tyres[]
  slug          String          @unique
}

model seller {
  id             Int       @id @default(autoincrement())
  name           String    @unique
  vat_code       String?
  commission_pct Decimal?  @default(10.00) @db.Decimal(5, 2)
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  offer          offer[]
}

model slug_history {
  old_slug   String    @id
  product_id BigInt?
  changed_at DateTime? @default(now()) @db.Timestamptz(6)
  product    product?  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model sys_setting {
  key String @id
  val String
}

enum product_type_enum {
  TYRE
  RIM
  FULLWHEEL
}

/// ---------- 1. Look-ups ----------
model tag {
  id       Int           @id @default(autoincrement())
  value    String
  slug     String        @unique
  products product_tag[]
}

model partner_tier {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  slug           String          @unique
  partner_prices partner_price[]
}

/// ---------- 2. Bridges ----------
model product_tag {
  product_id BigInt
  tag_id     Int
  product    product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  tag        tag     @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@id([product_id, tag_id])
}

/// ---------- 4. Partner-specific price (optional until Phase 3A) ----------
model partner_price {
  offer_id        BigInt
  partner_tier_id Int
  price_numeric   Decimal @db.Decimal(10, 2)
  discount_pct    Int? // e.g. 5 = 5 %

  offer        offer        @relation(fields: [offer_id], references: [id], onDelete: Cascade)
  partner_tier partner_tier @relation(fields: [partner_tier_id], references: [id])

  @@id([offer_id, partner_tier_id])
}

/// ---------- 5. Enums ----------
enum EuLabelClass {
  A
  B
  C
  D
  E
}

enum QualityGrade {
  I
  II
  III
  REMOLD
}
